=head1 NAME

mINI.c - minimalist ini parser for C

=head1 SYNOPSIS

mINI.c is intended to be a lightweight and easy to use ini parser.

=head1 DESCRIPTION

=head2 Format

=over

=item Comments

Comments begin with C<#>.  B<NOTE:> there is currently no way to include
a literal C<#> in an entry.

=item Sections

Sections are wrapped in brackets (C<[]>).

=item Keys

Anything that is not a comment or section will be interpreted as a key/value
pair.  A C<=> is used to separate the key from its value.  Both the C<=> and
the value are optional, in which case the value will be set to C<NULL>.

=back

=head2 Functions

=over

=item typedef mini_t

    typedef struct {
        FILE *stream;
        unsigned int lineno;
        char *section, *key, *value;
        int eof;
    } mini_t;

=item typedef mini_cb_t

    typedef int (*mini_cb_t)(int line, char *section,
            char *key, char *value, void *data);

=item mini_t *mini_finit(FILE *input);

=item mini_t *mini_init(const char *filename);

Initialize the mINI state object.

=item mini_t *mini_next(mini_t *mini);

Retrieve the next entry.  Empty/comment lines are skipped.  At the beginning of
a new section C<key> and C<value> will be C<NULL>.  If an error occurs, returns
C<NULL>.

=item mini_t *mini_lookup_key(mini_t *mini, const char *section, const char *key);

Lookup the value for a given key.  Returns C<NULL> if an error occurs or the
key is not found.  The C<eof> field may be used to distinguish read errors from
missing keys.

=item void mini_free(mini_t *mini);

Free the mINI state object.

=item int mini_fparse_cb(FILE *input, mini_cb_t cb, void *data);

=item int mini_parse_cb(const char *filename, mini_cb_t cb, void *data);

Parse a file using a simple callback.  If an error occurs the callback will be
called with C<lineno> set to C<0> and C<section>, C<key>, and C<value> set to
C<NULL>.  The callback can abort processing by return non-zero.  The final
return value from the callback will be returned.

=back

=head1 EXAMPLES

=over

=item Iterator-Based Parsing

    /* read an ini file and print it in a normalized format */

    #include <stdio.h>
    #include <errno.h>
    #include <string.h> /* strerror */

    #include "mini.h"

    int main(int argc, char *argv[]) {
        if(argc != 2) {
            fprintf(stderr, "wrong number of args, expected 1\n");
            return 2;
        }
        const char *filename = argv[1];
        int ret = 0;
        mini_t *mini = mini_ini(filename);
        while(mini_next(mini)) {
            if(!mini->key) {
                printf("[%s]\n", mini->section);
            } else if(!mini->value) {
                printf("%s\n", mini->key);
            } else {
                printf("%s = %s\n", mini->key, mini->value);
            }
        }
        if(!mini->eof) {
            fprintf(stderr, "error reading '%s' (%s)\n",
                    filename, strerror(errno));
            ret = 1;
        }
        mini_free(mini);
        return 0;
    }

=item Callback-Based Parsing

    /* read an ini file and print it in a normalized format */

    #include <stdio.h>
    #include <errno.h>
    #include <string.h> /* strerror */

    #include "mini.h"

    static int write_entry(int lineno, const char *section,
            const char *key, const char *value, void *data) {
        if(lineno == 0) {
            fprintf(stderr, "error reading '%s' (%s)\n",
                    filename, strerror(errno));
            return 1;
        } else if(!key) {
            printf("[%s]\n", section);
        } else if(!value) {
            printf("%s\n", key);
        } else {
            printf("%s = %s\n", key, value);
        }
        return 0;
    }

    int main(int argc, char *argv[]) {
        if(argc != 2) {
            fprintf(stderr, "wrong number of args, expected 1\n");
        }
        const char *filename = argv[1];
        return mini_parse_cb(filename, write_entry, NULL);
    }

=item Key Lookup

    /* read an ini file and print the value of a specified key */

    #include <stdio.h>
    #include <errno.h>
    #include <string.h> /* strerror */

    #include "mini.h"

    int main(int argc, char *argv[]) {
        if(argc != 4) {
            fprintf(stderr, "wrong number of args, expected 3\n");
            return 2;
        }

        const char *filename = argv[1];
        const char *section = argv[2];
        const char *key = argv[3];

        mini_t *mini = mini_ini(filename);
        if(mini_lookup_key(mini, section, key)) {
            if(mini->value) {
                printf("'%s'\n", mini->value);
            } else {
                printf("%s set\n", mini->key);
            }
        } else {
            if(mini->eof) {
                fprintf(stderr, "error: key '[%s]:%s' not found\n",
                        section, key);
            } else {
                fprintf(stderr, "error reading '%s' (%s)\n",
                        filename, strerror(errno));
            }
        }
        mini_free(mini);

        return 0;
    }

=back

=head1 RESTRICTIONS

=over

=item entries cannot contain '#'

=item entries cannot contain leading or trailing whitespace

=back

=head1 COPYRIGHT AND LICENSE

Copyright 2014 Andrew Gregory <andrew.gregory.8@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=head1 SEE ALSO

Project URL: L<http://github.com/andrewgregory/mINI>

Alternatives:
L<http://it.bmc.uu.se/andlov/proj/utils/libinifile/index.php>,
L<http://www.compuphase.com/minini.htm>

